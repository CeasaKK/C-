///////////////////

Preorder Traversal-

Recursion-

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void r(vector<int>&arr,TreeNode* head){
        if(head==nullptr)return;
        arr.push_back(head->val);
        r(arr,head->left);
        r(arr,head->right);
        return;
    }
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> arr;
        r(arr,root);
        return arr;
    }
};

Iterative-

///////////////////////////////

POST ORDER

Recursion-

Iterative-

///////////////////////////////

INORDERED 

Recursion-

Iterative-

/////////////////////////////

LEVEL ORDERED

code-

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>>ans;
        queue<TreeNode*>q;
        if(root==nullptr)return {};
        q.push(root);
        TreeNode* head= root;
        while(!q.empty()){
            vector<int>level;
            int a=q.size();
            for(int i=0;i<a;i++){
                head=q.front();
                q.pop();
                if(head->left!=nullptr)q.push(head->left);
                if(head->right!=nullptr)q.push(head->right);
                level.push_back(head->val);
            }
            ans.push_back(level);
            
        }
        return ans;
    }
};

////////////////////////////////////
