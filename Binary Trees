///////////////////

Preorder Traversal- [HEAD, LEFT, RIGHT]

Recursion-

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void r(vector<int>&arr,TreeNode* head){
        if(head==nullptr)return;
        arr.push_back(head->val);
        r(arr,head->left);
        r(arr,head->right);
        return;
    }
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> arr;
        r(arr,root);
        return arr;
    }
};

Iterative-

vector<int> p(TreeNode* root) {
        vector<int>v;
        stack<TreeNode*>s;
        TreeNode* head=root;
        if(root==nullptr)return {};
        s.push(head);
        while(!s.empty()){
                head=s.top();
                v.push_back(head->val);
                s.pop();
                if(head->right!=nullptr)s.push(head->right);
                if(head->left!=nullptr)s.push(head->left);
            
        }
        return v;
    }

///////////////////////////////

POST ORDER  [ LEFT, RIGHT, HEAD]

Recursion-

void r(vector<int>& v,TreeNode* head){
        if(head==nullptr)return;
        r(v,head->left);
        r(v,head->right);
        v.push_back(head->val);
    }

Iterative-

vector<int> twostack(TreeNode* root){
        TreeNode* head=root;
        stack<TreeNode*>s1,s2;
        vector<int>v;
        if(head==nullptr)return{};
        s1.push(head);
        while(!s1.empty()){
            head=s1.top();
            s1.pop();
            s2.push(head);
            if(head->left!=nullptr)s1.push(head->left);
            if(head->right!=nullptr)s1.push(head->right);
        }
        while(!s2.empty()){
            head=s2.top();
            s2.pop();
            v.push_back(head->val);
        }
        return v;

    }

///////////////////////////////

INORDERED [LEFT, HEAD, RIGHT]

Recursion-

void recurse(vector<int>&ans,TreeNode* head){
        if(head==nullptr)return;
         recurse(ans,head->left);
        ans.push_back(head->val);
        for(auto x:ans)cout<<x;
        cout<<endl;
         recurse(ans,head->right);
       // return;
    }

Iterative-

vector<int> i(TreeNode* root) { 
        vector<int> v; 
        stack<TreeNode*>s;
        TreeNode* head= root;
        while(true){
            if(head!=nullptr){
                s.push(head);
                head=head->left;
            }
            else{
                if(s.empty())break;
                head=s.top();
                s.pop();
                v.push_back(head->val);
                head=head->right;
            }
        }
        return v;
    }

/////////////////////////////

LEVEL ORDERED

code-

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>>ans;
        queue<TreeNode*>q;
        if(root==nullptr)return {};
        q.push(root);
        TreeNode* head= root;
        while(!q.empty()){
            vector<int>level;
            int a=q.size();
            for(int i=0;i<a;i++){
                head=q.front();
                q.pop();
                if(head->left!=nullptr)q.push(head->left);
                if(head->right!=nullptr)q.push(head->right);
                level.push_back(head->val);
            }
            ans.push_back(level);
            
        }
        return ans;
    }
};

////////////////////////////////////


HEIGHT OF A BINARY TREE

code-
    int optimal(TreeNode* head){
        if(head==nullptr)return 0;
        int lh=optimal(head->left);
        int rh=optimal(head->right);
        return 1+max(lh,rh);

    }
