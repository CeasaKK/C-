//pairs
void pairs(){
    pair<int,int>p={1,3};
    cout<<p.first<<" "<<p.second;
    pair<int,p<int,int>> p={1,{3,4}};
    cout<<p.first<<" "<<p.second.first<<" "<<p.second.second;
    pair<int,int> arr[]={{1,2},{3,4},{5,6}};
    cout<<arr[1].second;
}

//vectors
void vectors(){
    vector<int> v;
    v.push_back(1);
    v.emplace_back(2);
    
    vector<pair<int,int>> vec;
    
    vec.push_back({1,2}); //have to include curly brackets
    vec.emplace_back(1,2); //here you dont need to 
    
    vector<int> v(5,100);  //5 is the size, 100 is the value in those 5 columns
    
    vector<int> v(5); //there are 5 spaces created filled with any garbage value
    
    vector<int>v1(5,20); 
    vector<int>v2(v1); //you can copy 1 vector into the other
    
    
    
    
    vector<int>::iterator anyname=v.begin(); //assigns the ADDRESS of the first column to anyname
    anyname++; //moves the address to the next block
    cout<< *(anyname)<<" "; //* leads us to the value stored in that address
    
    vector<int>::iterator anyname=v.end(); //this points the column/placeholder address of one after the last placeholder in the vector
    vector<int>::iterator anyname=v.rend();  //this pointes to the address of placeholder just before the first placeholder in the vector
    vector<int>::iterator anyname=v.rbegin(); //points to the address of the last element in the vector
    // basically reverse is just the reverse of normal vector
    
    
    //printing the vector
    cout<<v[0];
    cout<<v.back(); //points to the last element in the vector
    
    for(vector<int>::iterator it=v.begin();it!=v.end();it++){
        cout<<*(it);
    }
    for(auto it=v.begin();it!=v.end();it++){. //auto automatically assigns the relevant data type to the variable
        cout<<*(it);
    }
    for(auto it : v){
        cout<<*(it);
    }
    
    
    //erase
    
    v.erase(v.begin()+1);
    v.erase(v.begin()+2,v.begin()+4);
    
    
    //insert
    
    //{100,100}
    v.insert(v.begin(),300)//{300,100,100}
    v.insert(v.begin()+1,2,10)//{300,10,10,100,100}
    vector<int>v1(2,50);
    v.insert(v.begin(),v1.begin(),v1.end());//{50,50,300,10,10,100,100}
    
    //size
    cout<<v.size()//7
    //
    v.pod_back()//{50}
    
    
    
    //swap
    //v1={10,20}
    //v2={30,40}
    v1.swap(v2);//v1={30,40} and v2={10,20}
    
    
    v.clear();//erases the entire vector
    cout<<v.empty()//false if >1 elements
    
}

//list
void list(){
    //everything same as vector
    list<int> ls;
    ls.push_front(5);//places 5 as the first element of the list
    //pushfront is less costly than insert in vectors in terms of time complexity
}
//deque is exactly similar to list and vector


//stack
//follows LIFO- last in first out
void stack(){
  stack<int> st;
  st.push(1);//{1}
  st.push(2);//{2,1}
  st.emplace(5);//{5,2,1}
  cout<<st.top(5);//gives 5 "**st[2] is invalid**"
  st.pop();//{2,1}
  cout<<st.size();//2
  cout<<st.empty();//false
}


//queue
//FIFO- first in first out
void queue(){
  //same declaration, same functions like push and emplace
  q.back()//gives the last element 
  q.front()//gives the first element
  q.pop()//removes the first element
}



//priority queue
//largest element stays at the top(first)
void pq(){
  //if you want the lowest element to be at top
  priority queue<int,vector<int>, greater<int>> pq;//makes a reverse PQ
}





//set 
void set(){ //sorted and unique
    set<int>st ;
    st.insert(1);//{1}
    st.insert(2);//{1,2}
    st.insert(2);//{1,2}//unique
    st.insert(4);//{1,2,4}
    st.insert(3);//{1,2,3,4}//sorted
    
    //{1,2,3,4,5}
    auto it = st.find(3);//will return the address of 3
    auto it = st.find(6);// if an element is not in the set, it will always return set.end() which points to right after the last element
    
    st.erase(5);//deletes 5
    st.erase(it1,it2);//deletes a range of no.s does not delete upper bound
    
    int cnt = st.count(1);// if 1 is there it gives 1 otherwise 0
}


//multiset
void multiset(){
    //everything same as set but can store duplicates
    multiset<int>ms;
    //{1,1,1,1}
    ms.erase(1);//deletes all 1
    
    int cnt = ms.count(1);
    
    ms.erase(ms.find(1));//erases only single 1
    ms.erase(ms.find(1),ms.find(1)+2);//to erase a certain no. of 1s
}


//Uset or unordered set
    //everything works same only lower and upper bound functions dont work


//MAP
void map(){//map keys unique keys in sorted order
    map<int,int>m;
    map<int,pair<int,int>>mp;
    map< pair<int,int>,int>mpp;
    
    m[1]=2;
    m.emplace({3,1});
    m.insert({2,4});//({1,2},{2,4},{3,1})
    
    //to access elements
    for(auto it : m){
        cout<<it.first<<" "<<it.second<<endl;
    }
    
    cout<<m[1];
    cout<<m[5];
    
    auto it = m.find(3);
    cout<< *(it).second;
    
    auto it=m.find(5);//gives m.end()
    
    
    auto it= m.lower_bound(2);
    
    auto it= m.upper_bound(3);
    //rest are all same
}



//multimap-//everything same as map but duplicate keys
//unordered map- //same as set and unordered set difference


//ALOGORYTHMS
void extra(){
    
    sort(a,a + n);
    sort(v.begin(), v.end());
    
    sort(a+2,a+4);
    sort(a, a+n, greater<int>);
    
    pair<int,int> a[]= {{1,2},{2,1},{4,1}};
    
    sort(a, a+n, comp);
    
    int num=7;
    int cnt= _bulletin_popcount();
    
    long long num = 2481246276584765;
    int cnt= _bulletin_popcountll();
    
    string s = "123";
    sort (s.begin(),s.end());
    do{
        cout<<s<<endl;
    }while(nest_permutation(s.begin(),s.end()));
    
    int maxi = *max_element(a,a+n);
}


