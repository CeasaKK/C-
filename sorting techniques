//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

SELECTION SORT

time complexity- n^2
space complexity- o(1)

process-
	•	Find the minimum element in the unsorted array.
	•	Swap it with the first unsorted element.

code-
void selectionSort(int arr[], int n) {
    for(int i = 0; i < n-1; i++) {
        int minIndex = i;
        for(int j = i+1; j < n; j++) {
            if(arr[j] < arr[minIndex]) minIndex = j;
        }
        swap(arr[minIndex], arr[i]);
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BUBBLE SORT

time complexity- n^2
space complexity- o(1)

process-
Repeatedly swaps adjacent elements if they are in the wrong order. The largest elements “bubble up” to the end of the array in each pass.

code-
void bubbleSort(int arr[], int n) {
    for(int i = 0; i < n-1; i++) {
        bool swapped = false;
        for(int j = 0; j < n-i-1; j++) {
            if(arr[j] > arr[j+1]) {
                swap(arr[j], arr[j+1]);
                swapped = true;
            }
        }
        if(!swapped) break; // Optimization
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

INSERTION SORT

time complexity- n^2
space complexity- o(1)

process-
Takes one element and inserts it into the correct position in the already sorted part.

code-
void insertionSort(int arr[], int n) {
    for(int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;
        while(j >= 0 && arr[j] > key) {
            arr[j+1] = arr[j];
            j--;
        }
        arr[j+1] = key;
    }
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

MERGE SORT

time complexity- nlogn
space complexity- o(n)

process-
Divide the array into halves recursively until each has one element. Then merge them in sorted order. It’s a classic Divide & Conquer algorithm.

code-
void merge(int arr[], int l, int m, int r) {
    int n1 = m - l + 1, n2 = r - m;
    int L[n1], R[n2];
    for(int i = 0; i < n1; i++) L[i] = arr[l+i];
    for(int j = 0; j < n2; j++) R[j] = arr[m+1+j];

    int i = 0, j = 0, k = l;
    while(i < n1 && j < n2) {
        if(L[i] <= R[j]) arr[k++] = L[i++];
        else arr[k++] = R[j++];
    }
    while(i < n1) arr[k++] = L[i++];
    while(j < n2) arr[k++] = R[j++];
}

void mergeSort(int arr[], int l, int r) {
    if(l < r) {
        int m = (l+r)/2;
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
        merge(arr, l, m, r);
    }
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

RECURSIVE BUBBLE SORT

time complexity- nlogn
space complexity- o(n)

process-
Same idea as bubble sort, but done recursively instead of iteratively.

code-
