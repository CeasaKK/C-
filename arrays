pascals triangle///////////////////////////////////////////////////////////////////////////////////////////////


class Solution {
public:
    /*int fact(int r){
        int a=1;
        for (int i=1;i<=r;i++){
            a*=i;
        }
        return a;
    }*/
    int pnc(int n,int r){
        int a=1;
        int b=1;
        int res=1;
        for(int i=0;i<r;i++){
            res*=(n-i);
            res/=(i+1);
        }
        return res;
    }
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> output(numRows,vector<int>());
        output[0]={1};
        for (int i=1;i<output.size();i++){
            for (int j=0;j<=i;j++){
                output[i].push_back(pnc(i,j));
            }
        }
        return output;
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.

You must do it in place.

class Solution {
public:
    vector<int> findit(vector<int>& nums, int low, int high, int target) {
        vector<int> indi;
        for (int i = low; i <= high; i++) {
            if (nums[i] == 0)
                indi.push_back(i);
            else
                continue;
        }
        return indi;
    }
    void setZeroes(vector<vector<int>>& matrix) {
        int cnt = 0;
        vector<vector<int>> index(matrix.size(), vector<int>());
        for (int i = 0; i < matrix.size(); i++) {

            index[i].push_back(findit(matrix[i], 0, (matrix[i]).size() - 1, 0));
            cnt += 1;
        }
        for (int a = 0; a < matrix.size(); a++) {
            for (int j = 0; j < cnt; j++) {
                    for (int i = 0; i < matrix[j].size();
                         i++) { // making row zero
                        matrix[j][i] = 0;
                    }
                    for (int i = 0; i < matrix.size();
                         i++) { // making column zero
                        matrix[i][index[a][j]] = 0;
                    }
                } 
            }
        }
    }
};


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

A permutation of an array of integers is an arrangement of its members into a sequence or linear order.

For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].
The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).

For example, the next permutation of arr = [1,2,3] is [1,3,2].
Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.
Given an array of integers nums, find the next permutation of nums.

The replacement must be in place and use only constant extra memory.


#include <algorithm>
class Solution {
public:

    int nextgreat(vector<int>& nums) { 
        int a=-1;
        for (int i=nums.size()-1;i>0;i--){
            if(nums[i-1]<nums[i]){a=i-1; break;}
        } 
        return a;
    }
    int nextgreat2(vector<int>& nums,int low,int high,int target) { 
        int a=low;
        for (int i=low;i<high;i++){
            if(nums[i]>target && nums[i]<=nums[a]){a=i; break;}
        } 
        return a;
    }

    void nextPermutation(vector<int>& nums) {

        int a=nextgreat(nums); cout<<"main a="<<a<<endl;
        if (a==-1){reverse(nums.begin(),nums.end()); return;}
        int b=nextgreat2(nums,a+1,nums.size(),nums[a]);
        swap(nums[a],nums[b]);
        reverse(nums.begin()+a+1,nums.end());
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
